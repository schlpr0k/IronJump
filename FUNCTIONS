#!/bin/bash
## NAVIGATION Functions
ast_reboot() {
    echo -e "\r\nAre you sure you want to reboot the server?"
    prompt_reboot
}

prompt_reboot() {
    #TBD - Implement Reboot Instead of Exit
    read -p "(C)ontinue or (R)eturn: " prompt_response
    case "$prompt_response" in
        C|c) echo -e "\r\n\tRebooting server in 10 seconds... Press Ctrl+C to halt reboot." ; sleep 10 ; exit 0 ;;
        R|r) echo -e "\r\nReturning to Main Menu..." ; sleep 1 ; main_menu ;;
        *) invalid_choice ; prompt_reboot ;;
    esac
}

invalid_choice() {
    echo -e "\r\nInvalid Choice, try again...\r\n"
    sleep 1
    return 0
}


## IRONJUMP FUNCTIONS
f_ssh_hard_os_selection() {
    clear
    echo "Select the operating system to perform SSH hardening..."
    nav_top_bar
    echo "1. Amazon Linux 2023"
    echo "2. Ubuntu 24.04, Mint 22"
    echo "3. Ubuntu 22.04, Kali 2024, Parrot, ParrotSec 6.2"
    echo "4. Ubuntu 20.04"
    echo "5. Ubuntu 18.04"
    echo "6. Ubuntu 16.04"
    echo "7. Ubuntu 14.04"
    echo "8. Ubuntu Core 18"
    echo "9. Ubuntu Core 16"
    echo "10. Debian Bookworm (Debian 12), Raspberry Pi OS"
    echo "11. Debian Bullseye (Debian 11)"
    echo "12. Debian Buster (Debian 10)"
    echo "13. Rocky Linux 9"
    echo "14. RHEL 8 Server / CentOS 8 Server"
    echo "15. RHEL 7 Server / CentOS 7 Server"
    echo "16. pfSense 2.4"
    echo "17. OpenBSD 6.2 Server"
    nav_breaker_bar
    read -p "Enter your choice: " choice
    case $choice in
        1) f_ssh_hard_regen_hostkeys_1 ; f_ssh_hard_s1 ;;
        2) f_ssh_hard_regen_hostkeys_1 ; f_ssh_hard_s2 ;;
        3) f_ssh_hard_regen_hostkeys_1 ; f_ssh_hard_s3 ;;
        4) f_ssh_hard_regen_hostkeys_1 ; f_ssh_hard_s4 ;;
        5) f_ssh_hard_regen_hostkeys_1 ; f_ssh_hard_s5 ;;
        6) f_ssh_hard_regen_hostkeys_1 ; f_ssh_hard_s6 ;;
        7) f_ssh_hard_regen_hostkeys_1 ; f_ssh_hard_s7 ;;
        8) f_ssh_hard_regen_hostkeys_1 ; f_ssh_hard_s8 ;;
        9) f_ssh_hard_regen_hostkeys_1 ; f_ssh_hard_s9 ;;
        10) f_ssh_hard_regen_hostkeys_1 ; f_ssh_hard_s10 ;;
        11) f_ssh_hard_regen_hostkeys_1 ; f_ssh_hard_s11 ;;
        12) f_ssh_hard_regen_hostkeys_1 ; f_ssh_hard_s12 ;;
        13) f_ssh_hard_regen_hostkeys_1 ; f_ssh_hard_s13 ;;
        14) f_ssh_hard_regen_hostkeys_2 ; f_ssh_hard_s14 ;;
        15) f_ssh_hard_regen_hostkeys_3 ; f_ssh_hard_s15 ;;
        16) f_ssh_hard_regen_hostkeys_1 ; f_ssh_hard_s16 ;;
        17) f_ssh_hard_regen_hostkeys_1 ; f_ssh_hard_s17 ;;
        *) invalid_choice ; f_ssh_hard_os_selection ;;
    esac
}

f_ssh_hard_check() {
    if [[ -f $SSH_CONFIG_FILE ]]; then
        echo -e "\r\n\tFound SSH Configuration File"
        echo -e "\t  !Recommended Action: Would you like to make a backup? (y/n)"
        echo -e "\t-------------------"
        read -p "Enter your choice: " choice
        case "$choice" in
            Yes|yes|Y|y) echo -e "\r\n\tMaking backup..." ; cp $SSH_CONFIG_FILE $SSH_CONFIG_BACKUP ;;
            No|no|N|n) echo -e "\r\n\tSkipping backup..." ;;
            *) invalid_choice ; sleep 1 ; f_ssh_hard_check ;; 
        esac
        sleep 1
    else
        echo -e "\r\n\tSSH Config File Not Found. Returning to Main Menu." ; sleep 1 ; main_menu
    fi
}

f_ssh_hard_regen_hostkeys_1() {
    if [[ -f /etc/ssh/ssh_host_rsa_key && -f /etc/ssh/ssh_host_ed25519_key ]]; then
        echo -e "\r\n\tSSH host keys for RSA and ED25519 currently exist.\r\n\tDo you want to regenerate the keys? (y/n)"
        echo -e "\t\t- If this is the first time: Recommendation = yes"
        echo -e "\t\t- If this is a modification of SSH settings: Recommendation = no"
        echo -e "\t-------------------"
        read -p "Enter your choice: " choice
    else
        choice="y"
    fi
    case "$choice" in
        Yes|yes|Y|y)
            {
                rm -f /etc/ssh/ssh_host_*
                ssh-keygen -t rsa -b 4096 -f /etc/ssh/ssh_host_rsa_key -N ""
                ssh-keygen -t ed25519 -f /etc/ssh/ssh_host_ed25519_key -N ""
                f_ssh_hard_set_hostkeys
                f_ssh_hard_dh_moduli
            }
            ;;
        No|no|N|n) return 0 ;;
        *) invalid_choice ; f_ssh_hard_regen_hostkeys_1 ;;
    esac
}

f_ssh_hard_regen_hostkeys_2() {
    f_ssh_hard_regen_hostkeys_1
    chgrp ssh_keys /etc/ssh/{ssh_host_ed25519_key,ssh_host_rsa_key}
    chmod g+r etc/ssh/{ssh_host_ed25519_key,ssh_host_rsa_key}
}

f_ssh_hard_regen_hostkeys_3() {
    local ssh_audit_conf="/etc/systemd/system/sshd-keygen.service.d/ssh-audit.conf"
    f_ssh_hard_regen_hostkeys_1
    mkdir -p /etc/systemd/system/sshd-keygen.service.d
    echo "[Unit]" > $ssh_audit_conf
    echo "ConditionFileNotEmpty=" >> $ssh_audit_conf
    echo "ConditionFileNotEmpty=!/etc/ssh/ssh_host_ed25519_key" >>$ssh_audit_conf
    systemctl daemon-reload
    f_ssh_hard_regen_hostkeys_2
}

f_ssh_hard_set_hostkeys() {
    #Enable RSA hostkey
    if [[ $(grep "^\#HostKey /etc/ssh/ssh_host_rsa_key" < $SSH_CONFIG_FILE |wc -l) -gt 0 ]]; then
        sed -i 's/^\#HostKey \/etc\/ssh\/ssh_host_rsa_key$/HostKey \/etc\/ssh\/ssh_host_rsa_key/g' $SSH_CONFIG_FILE
    else
        echo -e "\nHostKey /etc/ssh/ssh_host_rsa_key\n" >> $SSH_CONFIG_FILE
    fi

    #Enable ED25519 hostkey
    if [[ $(grep "^\#HostKey /etc/ssh/ssh_host_ed25519_key" < $SSH_CONFIG_FILE |wc -l) -gt 0 ]]; then
        sed -i 's/^\#HostKey \/etc\/ssh\/ssh_host_ed25519_key$/HostKey \/etc\/ssh\/ssh_host_ed25519_key/g' $SSH_CONFIG_FILE
    else
        echo -e "\nHostKey /etc/ssh/ssh_host_ed25519_key\n" >> $SSH_CONFIG_FILE
    fi

    #Disable DSA hostkey
    if [[ $(grep "^\HostKey /etc/ssh/ssh_host_dsa_key" < $SSH_CONFIG_FILE |wc -l) -gt 0 ]]; then
        sed -i 's/^\HostKey \/etc\/ssh\/ssh_host_dsa_key$/\#HostKey \/etc\/ssh\/ssh_host_dsa_key/g' $SSH_CONFIG_FILE
    fi

    #Disable ECDSA hostkey
    if [[ $(grep "^\HostKey /etc/ssh/ssh_host_ecdsa_key" < $SSH_CONFIG_FILE |wc -l) -gt 0 ]]; then
        sed -i 's/^\HostKey \/etc\/ssh\/ssh_host_ecdsa_key$/\#HostKey \/etc\/ssh\/ssh_host_ecdsa_key/g' $SSH_CONFIG_FILE
    fi
}

f_ssh_hard_dh_moduli() {
    if [[ ! -f /etc/ssh/moduli ]]; then
        ssh-keygen -G /etc/ssh/moduli -b 3072
    else
        awk '$5 >= 3071' /etc/ssh/moduli > /etc/ssh/moduli.safe
        mv -f /etc/ssh/moduli.safe /etc/ssh/moduli
    fi
}

f_ssh_set_configuration() {
    sed -i "s/^\#Port .*$\|^Port .*$/Port $SSH_Port/" $SSH_CONFIG_FILE
    sed -i "s/^\#RekeyLimit .*$\|^RekeyLimit .*$/RekeyLimit $SSH_RekeyLimit/" $SSH_CONFIG_FILE
    sed -i "s/^\#LogLevel .*$\|^LogLevel .*$/LogLevel $SSH_LogLevel/" $SSH_CONFIG_FILE
    sed -i "s/^\#LoginGraceTime .*$\|^LoginGraceTime .*$/LoginGraceTime $SSH_LoginGraceTime/" $SSH_CONFIG_FILE
    sed -i "s/^\#MaxAuthTries .*$\|^MaxAuthTries .*$/MaxAuthTries $SSH_MaxAuthTries/" $SSH_CONFIG_FILE
    sed -i "s/^\#MaxSessions .*$\|^MaxSessions .*$/MaxSessions $SSH_MaxSessions/" $SSH_CONFIG_FILE
    sed -i "s/^\#PermitRootLogin .*$\|^PermitRootLogin .*$/PermitRootLogin $SSH_PermitRootLogin/" $SSH_CONFIG_FILE
    sed -i "s/^\#PubkeyAuthentication .*$\|^PubkeyAuthentication .*$/PubkeyAuthentication $SSH_PubkeyAuthentication/" $SSH_CONFIG_FILE
    sed -i "s/^\#PasswordAuthentication .*$\|^PasswordAuthentication .*$/PasswordAuthentication $SSH_PasswordAuthentication/" $SSH_CONFIG_FILE
    sed -i "s/^\#PermitEmptyPasswords .*$\|^PermitEmptyPasswords .*$/PermitEmptyPasswords $SSH_PermitEmptyPasswords/" $SSH_CONFIG_FILE
    sed -i "s/^\#AllowAgentForwarding .*$\|^AllowAgentForwarding .*$/AllowAgentForwarding $SSH_AllowAgentForwarding/" $SSH_CONFIG_FILE
    sed -i "s/^\#AllowTcpForwarding .*$\|^AllowTcpForwarding .*$/AllowTcpForwarding $SSH_AllowTcpForwarding/" $SSH_CONFIG_FILE
    sed -i "s/^\#GatewayPorts .*$\|^GatewayPorts .*$/GatewayPorts $SSH_GatewayPorts/" $SSH_CONFIG_FILE
    sed -i "s/^\#X11Forwarding .*$\|^X11Forwarding .*$/X11Forwarding $SSH_X11Forwarding/" $SSH_CONFIG_FILE
    sed -i "s/^\#PermitTTY .*$\|^PermitTTY .*$/PermitTTY $SSH_PermitTTY/" $SSH_CONFIG_FILE
    sed -i "s/^\#TCPKeepAlive .*$\|^TCPKeepAlive .*$/TCPKeepAlive $SSH_TCPKeepAlive/" $SSH_CONFIG_FILE
    sed -i "s/^\#PermitUserEnvironment .*$\|^PermitUserEnvironment .*$/PermitUserEnvironment $SSH_PermitUserEnvironment/" $SSH_CONFIG_FILE
    sed -i "s/^\#Compression .*$\|^Compression .*$/Compression $SSH_Compression/" $SSH_CONFIG_FILE
    sed -i "s/^\#ClientAliveInterval .*$\|^ClientAliveInterval .*$/ClientAliveInterval $SSH_ClientAliveInterval/" $SSH_CONFIG_FILE
    sed -i "s/^\#ClientAliveCountMax .*$\|^ClientAliveCountMax .*$/ClientAliveCountMax $SSH_ClientAliveCountMax/" $SSH_CONFIG_FILE
    sed -i "s/^\#UseDNS .*$\|^UseDNS .*$/UseDNS $SSH_UseDNS/" $SSH_CONFIG_FILE
    sed -i "s/^\#PermitTunnel .*$\|^PermitTunnel .*$/PermitTunnel $SSH_PermitTunnel/" $SSH_CONFIG_FILE
    sed -i "s/^\#AcceptEnv .*$\|^AcceptEnv .*$/AcceptEnv ac_host LANG LC_\* /" $SSH_CONFIG_FILE
}

f_ssh_hard_s1() {
    #Specific hardening commands for Amazon Linux 2023
    echo -e "# Restrict key exchange, cipher, and MAC algorithms, as per sshaudit.com\n# hardening guide.\nKexAlgorithms sntrup761x25519-sha512@openssh.com,curve25519-sha256,curve25519-sha256@libssh.org,gss-curve25519-sha256-,diffie-hellman-group16-sha512,gss-group16-sha512-,diffie-hellman-group18-sha512,diffie-hellman-group-exchange-sha256\n\nCiphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-gcm@openssh.com,aes128-ctr\n\nMACs hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,umac-128-etm@openssh.com\n\nHostKeyAlgorithms sk-ssh-ed25519-cert-v01@openssh.com,ssh-ed25519-cert-v01@openssh.com,rsa-sha2-512-cert-v01@openssh.com,rsa-sha2-256-cert-v01@openssh.com,sk-ssh-ed25519@openssh.com,ssh-ed25519,rsa-sha2-512,rsa-sha2-256\n\nCASignatureAlgorithms sk-ssh-ed25519@openssh.com,ssh-ed25519,rsa-sha2-512,rsa-sha2-256\n\nGSSAPIKexAlgorithms gss-curve25519-sha256-,gss-group16-sha512-\n\nHostbasedAcceptedAlgorithms sk-ssh-ed25519-cert-v01@openssh.com,ssh-ed25519-cert-v01@openssh.com,sk-ssh-ed25519@openssh.com,ssh-ed25519,rsa-sha2-512-cert-v01@openssh.com,rsa-sha2-512,rsa-sha2-256-cert-v01@openssh.com,rsa-sha2-256\n\nPubkeyAcceptedAlgorithms sk-ssh-ed25519-cert-v01@openssh.com,ssh-ed25519-cert-v01@openssh.com,rsa-sha2-512-cert-v01@openssh.com,rsa-sha2-256-cert-v01@openssh.com,sk-ssh-ed25519@openssh.com,ssh-ed25519,rsa-sha2-512,rsa-sha2-256\n\n" > /etc/crypto-policies/back-ends/opensshserver.config
    f_ssh_set_configuration
    systemctl restart sshd
}

f_ssh_hard_s2() {
    #Specific hardening commands for Ubuntu 24.04
    echo -e "# Restrict key exchange, cipher, and MAC algorithms, as per sshaudit.com\n# hardening guide.\nKexAlgorithms sntrup761x25519-sha512@openssh.com,gss-curve25519-sha256-,curve25519-sha256,curve25519-sha256@libssh.org,diffie-hellman-group18-sha512,diffie-hellman-group-exchange-sha256,gss-group16-sha512-,diffie-hellman-group16-sha512\n\nCiphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-gcm@openssh.com,aes128-ctr\n\nMACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,umac-128-etm@openssh.com\n\nRequiredRSASize 3072\n\nHostKeyAlgorithms sk-ssh-ed25519-cert-v01@openssh.com,ssh-ed25519-cert-v01@openssh.com,rsa-sha2-512-cert-v01@openssh.com,rsa-sha2-256-cert-v01@openssh.com,sk-ssh-ed25519@openssh.com,ssh-ed25519,rsa-sha2-512,rsa-sha2-256\n\nCASignatureAlgorithms sk-ssh-ed25519@openssh.com,ssh-ed25519,rsa-sha2-512,rsa-sha2-256\n\nGSSAPIKexAlgorithms gss-curve25519-sha256-,gss-group16-sha512-\n\nHostbasedAcceptedAlgorithms sk-ssh-ed25519-cert-v01@openssh.com,ssh-ed25519-cert-v01@openssh.com,rsa-sha2-512-cert-v01@openssh.com,rsa-sha2-256-cert-v01@openssh.com,sk-ssh-ed25519@openssh.com,ssh-ed25519,rsa-sha2-512,rsa-sha2-256\n\nPubkeyAcceptedAlgorithms sk-ssh-ed25519-cert-v01@openssh.com,ssh-ed25519-cert-v01@openssh.com,rsa-sha2-512-cert-v01@openssh.com,rsa-sha2-256-cert-v01@openssh.com,sk-ssh-ed25519@openssh.com,ssh-ed25519,rsa-sha2-512,rsa-sha2-256" > /etc/ssh/sshd_config.d/ssh-audit_hardening.conf
    f_ssh_set_configuration
    systemctl restart ssh
}

f_ssh_hard_s3() {
    #Specific hardening commands for Ubuntu 22.04
    echo -e "# Restrict key exchange, cipher, and MAC algorithms, as per sshaudit.com\n# hardening guide.\nKexAlgorithms sntrup761x25519-sha512@openssh.com,curve25519-sha256,curve25519-sha256@libssh.org,gss-curve25519-sha256-,diffie-hellman-group16-sha512,gss-group16-sha512-,diffie-hellman-group18-sha512,diffie-hellman-group-exchange-sha256\n\nCiphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-gcm@openssh.com,aes128-ctr\n\nMACs hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,umac-128-etm@openssh.com\n\nHostKeyAlgorithms sk-ssh-ed25519-cert-v01@openssh.com,ssh-ed25519-cert-v01@openssh.com,rsa-sha2-512-cert-v01@openssh.com,rsa-sha2-256-cert-v01@openssh.com,sk-ssh-ed25519@openssh.com,ssh-ed25519,rsa-sha2-512,rsa-sha2-256\n\nCASignatureAlgorithms sk-ssh-ed25519@openssh.com,ssh-ed25519,rsa-sha2-512,rsa-sha2-256\n\nGSSAPIKexAlgorithms gss-curve25519-sha256-,gss-group16-sha512-\n\nHostbasedAcceptedAlgorithms sk-ssh-ed25519-cert-v01@openssh.com,ssh-ed25519-cert-v01@openssh.com,sk-ssh-ed25519@openssh.com,ssh-ed25519,rsa-sha2-512-cert-v01@openssh.com,rsa-sha2-512,rsa-sha2-256-cert-v01@openssh.com,rsa-sha2-256\n\nPubkeyAcceptedAlgorithms sk-ssh-ed25519-cert-v01@openssh.com,ssh-ed25519-cert-v01@openssh.com,sk-ssh-ed25519@openssh.com,ssh-ed25519,rsa-sha2-512-cert-v01@openssh.com,rsa-sha2-512,rsa-sha2-256-cert-v01@openssh.com,rsa-sha2-256" > /etc/ssh/sshd_config.d/ssh-audit_hardening.conf
    f_ssh_set_configuration
    systemctl restart ssh
}

f_ssh_hard_s4() {
    #Specific hardening commands for Ubuntu 20.04
    echo -e "\n# Restrict key exchange, cipher, and MAC algorithms, as per sshaudit.com\n# hardening guide.\nKexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512,diffie-hellman-group-exchange-sha256\nCiphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr\nMACs hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,umac-128-etm@openssh.com\nHostKeyAlgorithms ssh-ed25519,ssh-ed25519-cert-v01@openssh.com,sk-ssh-ed25519@openssh.com,sk-ssh-ed25519-cert-v01@openssh.com,rsa-sha2-256,rsa-sha2-512,rsa-sha2-256-cert-v01@openssh.com,rsa-sha2-512-cert-v01@openssh.com" > /etc/ssh/sshd_config.d/ssh-audit_hardening.conf
    f_ssh_set_configuration
    service ssh restart
}

f_ssh_hard_s5() {
    #Specific hardening commands for Ubuntu 18.04
    echo -e "\n# Restrict key exchange, cipher, and MAC algorithms, as per sshaudit.com\n# hardening guide.\nKexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512,diffie-hellman-group-exchange-sha256\nCiphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr\nMACs hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,umac-128-etm@openssh.com\nHostKeyAlgorithms ssh-ed25519,ssh-ed25519-cert-v01@openssh.com" >> $SSH_CONFIG_FILE
    f_ssh_set_configuration
    service ssh restart
}

f_ssh_hard_s6() {
    #Specific hardening commands for Ubuntu 16.04
    echo -e "\n# Restrict key exchange, cipher, and MAC algorithms, as per sshaudit.com\n# hardening guide.\nKexAlgorithms curve25519-sha256@libssh.org,diffie-hellman-group-exchange-sha256\nCiphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr\nMACs hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,umac-128-etm@openssh.com" >> $SSH_CONFIG_FILE
    f_ssh_set_configuration
    service ssh restart
}

f_ssh_hard_s7() {
    #Specific hardening commands for Ubuntu 14.04
    echo -e "\n# Restrict key exchange, cipher, and MAC algorithms, as per sshaudit.com\n# hardening guide.\nKexAlgorithms curve25519-sha256@libssh.org,diffie-hellman-group-exchange-sha256\nCiphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr\nMACs hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,umac-128-etm@openssh.com" >> $SSH_CONFIG_FILE
    f_ssh_set_configuration
    service ssh restart
}

f_ssh_hard_s8() {
    #Specific hardening commands for Ubuntu Core 18
    echo -e "\n# Only enable RSA and ED25519 host keys.\nHostKey /etc/ssh/ssh_host_rsa_key\nHostKey /etc/ssh/ssh_host_ed25519_key\n\n# Restrict key exchange, cipher, and MAC algorithms, as per sshaudit.com\n# hardening guide.\nKexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512,diffie-hellman-group-exchange-sha256\nCiphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr\nMACs hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,umac-128-etm@openssh.com" >> $SSH_CONFIG_FILE
    f_ssh_set_configuration
    service ssh reload
}

f_ssh_hard_s9() {
    #Specific hardening commands for Ubuntu Core 16
    sed -i 's/^MACs \(.*\)$/\#MACs \1/g' $SSH_CONFIG_FILE
    echo -e "\n# Restrict MAC algorithms, as per sshaudit.com hardening guide.\nMACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,umac-128-etm@openssh.com" >> $SSH_CONFIG_FILE
    f_ssh_set_configuration
    service ssh reload
}

f_ssh_hard_s10() {
    #Specific hardening commands for Debian Bookworm (Debian 12)
    echo -e "# Restrict key exchange, cipher, and MAC algorithms, as per sshaudit.com\n# hardening guide.\n KexAlgorithms sntrup761x25519-sha512@openssh.com,curve25519-sha256,curve25519-sha256@libssh.org,gss-curve25519-sha256-,diffie-hellman-group16-sha512,gss-group16-sha512-,diffie-hellman-group18-sha512,diffie-hellman-group-exchange-sha256\n\nCiphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-gcm@openssh.com,aes128-ctr\n\nMACs hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,umac-128-etm@openssh.com\n\nHostKeyAlgorithms sk-ssh-ed25519-cert-v01@openssh.com,ssh-ed25519-cert-v01@openssh.com,rsa-sha2-512-cert-v01@openssh.com,rsa-sha2-256-cert-v01@openssh.com,sk-ssh-ed25519@openssh.com,ssh-ed25519,rsa-sha2-512,rsa-sha2-256\n\nRequiredRSASize 3072\n\nCASignatureAlgorithms sk-ssh-ed25519@openssh.com,ssh-ed25519,rsa-sha2-512,rsa-sha2-256\n\nGSSAPIKexAlgorithms gss-curve25519-sha256-,gss-group16-sha512-\n\nHostbasedAcceptedAlgorithms sk-ssh-ed25519-cert-v01@openssh.com,ssh-ed25519-cert-v01@openssh.com,sk-ssh-ed25519@openssh.com,ssh-ed25519,rsa-sha2-512-cert-v01@openssh.com,rsa-sha2-512,rsa-sha2-256-cert-v01@openssh.com,rsa-sha2-256\n\nPubkeyAcceptedAlgorithms sk-ssh-ed25519-cert-v01@openssh.com,ssh-ed25519-cert-v01@openssh.com,sk-ssh-ed25519@openssh.com,ssh-ed25519,rsa-sha2-512-cert-v01@openssh.com,rsa-sha2-512,rsa-sha2-256-cert-v01@openssh.com,rsa-sha2-256\n\n" > /etc/ssh/sshd_config.d/ssh-audit_hardening.conf
    f_ssh_set_configuration
    service ssh restart
}

f_ssh_hard_s11() {
    #Specific hardening commands for Debian Bullseye (Debian 11)
    echo -e "\n# Restrict key exchange, cipher, and MAC algorithms, as per sshaudit.com\n# hardening guide.\nKexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512,diffie-hellman-group-exchange-sha256\nCiphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr\nMACs hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,umac-128-etm@openssh.com\nHostKeyAlgorithms ssh-ed25519,ssh-ed25519-cert-v01@openssh.com,sk-ssh-ed25519@openssh.com,sk-ssh-ed25519-cert-v01@openssh.com,rsa-sha2-256,rsa-sha2-512,rsa-sha2-256-cert-v01@openssh.com,rsa-sha2-512-cert-v01@openssh.com" > /etc/ssh/sshd_config.d/ssh-audit_hardening.conf
    f_ssh_set_configuration
    service ssh restart
}

f_ssh_hard_s12() {
    #Specific hardening commands for Debian Buster (Debian 10)
    echo -e "\n# Restrict key exchange, cipher, and MAC algorithms, as per sshaudit.com\n# hardening guide.\nKexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512,diffie-hellman-group-exchange-sha256\nCiphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr\nMACs hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,umac-128-etm@openssh.com\nHostKeyAlgorithms ssh-ed25519,ssh-ed25519-cert-v01@openssh.com,rsa-sha2-256,rsa-sha2-512,rsa-sha2-256-cert-v01@openssh.com,rsa-sha2-512-cert-v01@openssh.com" >> $SSH_CONFIG_FILE
    f_ssh_set_configuration
    service ssh restart
}

f_ssh_hard_s13() {
    #Specific hardening commands for Rocky Linux 9
    echo -e "# Restrict key exchange, cipher, and MAC algorithms, as per sshaudit.com\n# hardening guide.\nKexAlgorithms sntrup761x25519-sha512@openssh.com,curve25519-sha256,curve25519-sha256@libssh.org,gss-curve25519-sha256-,diffie-hellman-group16-sha512,gss-group16-sha512-,diffie-hellman-group18-sha512,diffie-hellman-group-exchange-sha256\n\nCiphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-gcm@openssh.com,aes128-ctr\n\nMACs hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,umac-128-etm@openssh.com\n\nHostKeyAlgorithms sk-ssh-ed25519-cert-v01@openssh.com,ssh-ed25519-cert-v01@openssh.com,rsa-sha2-512-cert-v01@openssh.com,rsa-sha2-256-cert-v01@openssh.com,sk-ssh-ed25519@openssh.com,ssh-ed25519,rsa-sha2-512,rsa-sha2-256\n\nRequiredRSASize 3072\n\nCASignatureAlgorithms sk-ssh-ed25519@openssh.com,ssh-ed25519,rsa-sha2-512,rsa-sha2-256\n\nGSSAPIKexAlgorithms gss-curve25519-sha256-,gss-group16-sha512-\n\nHostbasedAcceptedAlgorithms sk-ssh-ed25519-cert-v01@openssh.com,ssh-ed25519-cert-v01@openssh.com,sk-ssh-ed25519@openssh.com,ssh-ed25519,rsa-sha2-512-cert-v01@openssh.com,rsa-sha2-512,rsa-sha2-256-cert-v01@openssh.com,rsa-sha2-256\n\nPubkeyAcceptedAlgorithms sk-ssh-ed25519-cert-v01@openssh.com,ssh-ed25519-cert-v01@openssh.com,rsa-sha2-512-cert-v01@openssh.com,rsa-sha2-256-cert-v01@openssh.com,sk-ssh-ed25519@openssh.com,ssh-ed25519,rsa-sha2-512,rsa-sha2-256\n\n" > /etc/crypto-policies/back-ends/opensshserver.config
    f_ssh_set_configuration
    systemctl restart sshd
}

f_ssh_hard_s14() {
    #Specific hardening commands for RHEL 8 Server / CentOS 8 Server
    cp /etc/crypto-policies/back-ends/opensshserver.config /etc/crypto-policies/back-ends/opensshserver.config.orig
    echo -e "CRYPTO_POLICY='-oCiphers=chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr -oMACs=hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,umac-128-etm@openssh.com -oGSSAPIKexAlgorithms=gss-curve25519-sha256- -oKexAlgorithms=curve25519-sha256,curve25519-sha256@libssh.org,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512,diffie-hellman-group-exchange-sha256 -oHostKeyAlgorithms=ssh-ed25519,ssh-ed25519-cert-v01@openssh.com,rsa-sha2-256,rsa-sha2-512 -oPubkeyAcceptedKeyTypes=ssh-ed25519,ssh-ed25519-cert-v01@openssh.com,rsa-sha2-256,rsa-sha2-512'" > /etc/crypto-policies/back-ends/opensshserver.config
    f_ssh_set_configuration
    systemctl restart sshd.service
}

f_ssh_hard_s15() {
    #Specific hardening commands for RHEL 7 Server / CentOS 7 Server
    echo -e "\n# Restrict key exchange, cipher, and MAC algorithms, as per sshaudit.com\n# hardening guide.\nKexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org,diffie-hellman-group18-sha512,diffie-hellman-group16-sha512,diffie-hellman-group-exchange-sha256\nCiphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr\nMACs hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,umac-128-etm@openssh.com" >> $SSH_CONFIG_FILE
    f_ssh_set_configuration
    systemctl restart sshd.service
}

f_ssh_hard_s16() {
    #Specific hardening commands for pfSense 2.4
    sed -i.bak 's/^MACs \(.*\)$/\#MACs \1/g' $SSH_CONFIG_FILE
    echo "" | echo "MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,umac-128-etm@openssh.com" >> $SSH_CONFIG_FILE
    f_ssh_set_configuration
    service sshd onerestart
}

f_ssh_hard_s17() {
    #Specific hardening commands for OpenBSD 6.2 Server
    echo -e "# Restrict key exchange, cipher, and MAC algorithms, as per sshaudit.com\n# hardening guide.\nKexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512,diffie-hellman-group-exchange-sha256\nCiphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr\nMACs hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,umac-128-etm@openssh.com" >> $SSH_CONFIG_FILE
    f_ssh_set_configuration
    kill -HUP `cat /var/run/sshd.pid`
}

#Setup IronJump Bastion Functions
f_setup_ironjump() {
    f_sshd_setup
    harden_ssh_service
    echo "Creating Chroot Environment."
    mkdir -p /home/ironjump/{users,servers,endpoints}/chroot
    chown -R root:root /home/ironjump
    chmod -R 755 /home/ironjump
    echo "Creating IronSync Account"
    useradd -U -m -d $IRONJUMP_CHROOT_ENV/servers/chroot/ironsync ironsync; sleep 1
    mkdir $IRONJUMP_CHROOT_ENV/servers/chroot/ironsync/.ssh
    touch $IRONJUMP_CHROOT_ENV/servers/chroot/ironsync/.ssh/authorized_keys
    chown -R ironsync:ironsync $IRONJUMP_CHROOT_ENV/servers/chroot/ironsync
    chmod 700 $IRONJUMP_CHROOT_ENV/servers/chroot/ironsync/.ssh
    chmod 600 $IRONJUMP_CHROOT_ENV/servers/chroot/ironsync/.ssh/authorized_keys
    local sync_pass=$(openssl rand -base64 64)
    echo "ironsync:"$sync_pass |chpasswd ; sleep 1
    unset sync_pass
    echo "Creating IronJump Groups."
    groupadd $IRONJUMP_SSH_GROUP
    groupadd $IRONJUMP_SRV_GROUP
    groupadd $IRONJUMP_END_GROUP
    groupadd ingot_registry
    if [[ -z $(cat /etc/sudoers |grep ingot_registry) ]]; then
        echo -e "\r\n#Sudoers entry for IronJump Automation" >>/etc/sudoers
        echo '%ingot_registry ALL=(ALL) NOPASSWD: /usr/bin/gpasswd -d * ingot_registry, /usr/bin/gpasswd -a * ironjump_endpoints, /usr/bin/chsh -s /usr/sbin/nologin *' >>/etc/sudoers
    fi
    echo "Adding groups to SSH Configuration."; sleep 1
    sed -i "/^Match Group $IRONJUMP_SSH_GROUP/,/\#END MATCH GROUP/d" $SSH_CONFIG_FILE
    cat << EOF >> $SSH_CONFIG_FILE
Match Group $IRONJUMP_SSH_GROUP
    ChrootDirectory $IRONJUMP_CHROOT_ENV/users/chroot
    ForceCommand /bin/false
    PermitTTY no
    AllowTcpForwarding yes
    GatewayPorts yes
    PermitTunnel yes
    AuthenticationMethods publickey
    PasswordAuthentication no
    Subsystem sftp none
#END MATCH GROUP
EOF
    sed -i "/^Match Group $IRONJUMP_SRV_GROUP/,/\#END MATCH GROUP/d" $SSH_CONFIG_FILE
    cat << EOF >> $SSH_CONFIG_FILE
Match Group $IRONJUMP_SRV_GROUP
    ChrootDirectory $IRONJUMP_CHROOT_ENV/servers/chroot
    ForceCommand /bin/false
    PermitTTY no
    AllowTcpForwarding yes
    GatewayPorts yes
    PermitTunnel yes
    AuthenticationMethods publickey
    PasswordAuthentication no
    Subsystem sftp none
#END MATCH GROUP
EOF
    sed -i "/^Match Group $IRONJUMP_END_GROUP/,/\#END MATCH GROUP/d" $SSH_CONFIG_FILE
    cat << EOF >> $SSH_CONFIG_FILE
Match Group $IRONJUMP_END_GROUP
    ChrootDirectory $IRONJUMP_CHROOT_ENV/endpoints/chroot
    ForceCommand /bin/false
    PermitTTY no
    AllowTcpForwarding yes
    GatewayPorts yes
    PermitTunnel yes
    AuthenticationMethods publickey
    PasswordAuthentication no
    Subsystem sftp none
#END MATCH GROUP
EOF
    sed -i "/^Match Group ingot_registry/,/\#END MATCH GROUP/d" $SSH_CONFIG_FILE
    cat << EOF >> $SSH_CONFIG_FILE
Match Group ingot_registry
    ForceCommand ~/ingot-registration.sh
    PermitTTY no
    AllowTcpForwarding no
    GatewayPorts no
    PermitTunnel no
    PasswordAuthentication yes
    Subsystem sftp none
#END MATCH GROUP
EOF
    sed -i "/^Match User ironsync/,/\#END MATCH USER/d" $SSH_CONFIG_FILE
    cat << EOF >> $SSH_CONFIG_FILE
Match User ironsync
    ForceCommand /bin/ironjump-sync.sh
    PermitTTY no
    AllowTcpForwarding no
    GatewayPorts no
    X11Forwarding no
    PermitTunnel no
    AuthenticationMethods publickey
    PasswordAuthentication no
    Subsystem sftp none
#END MATCH USER
EOF
    systemctl restart ssh
    systemctl daemon-reload
    #setup /bin/ironjump-sync.sh
    cat <<EOF > /bin/ironjump-sync.sh
#!/bin/bash
ac_host_file="/home/ironjump/endpoints/chroot/\$ac_host/access_control"
if [[ -z \$ac_host ]]; then
    echo "Error: No hostname provided."
    exit 1
fi
if [[ ! -f "/home/ironjump/endpoints/chroot/\$ac_host/access_control" ]]; then
    echo "Error: File does not exist or permission denied."
    exit 1
fi
cat "\$ac_host_file"
EOF
    chown root:ironsync /bin/ironjump-sync.sh
    chmod 0750 /bin/ironjump-sync.sh
    #Final Permissions Check
    chmod 0755/home/ironjump
    chmod 0750/home/ironjump/users
    chmod 0750/home/ironjump/servers
    chmod 0750/home/ironjump/endpoints
    chown -R :ironsync /home/ironjump
    echo "Building cron jobs."
    f_cron_pass_rotation
    read -p "Setup Complete. Press [ENTER] to continue."
}

f_os_identity() {
    #Detect OS and Version
    if [[ -f /etc/os-release ]]; then
        . /etc/os-release
        OS_NAME=$ID
        OS_VERSION=$VERSION_ID
    elif [[ -f /etc/debian_version ]]; then
        OS_NAME="debian"
        OS_VERSION=$(cat /etc/debian_version)
    elif [[ -f /etc/redhat-release ]]; then
        OS_NAME="rhel"
        OS_VERSION=$(grep -oE '[0-9]+' /etc/redhat-release | head -1)
    elif [[ -f /etc/openbsd-version ]]; then
        OS_NAME="openbsd"
        OS_VERSION=$(uname -r)
    else
        OS_NAME="Unsupported/Undetermined"
        OS_VERSION="Unsupported/Undetermined"
        return 1
    fi
    #Determine package manager
    case "$OS_NAME" in
        "amzn") # Amazon Linux
            if [[ "$OS_VERSION" == "2" || "$OS_VERSION" == "2023" ]]; then
                PKG_MANAGER="yum"
            fi
            ;;
        "ubuntu"|"linuxmint") # Ubuntu, Mint
            if [[ "$OS_VERSION" =~ ^(14.04|16.04|18.04|20.04|22.04|24.04)$ ]]; then
                PKG_MANAGER="apt"
            fi
            ;;
        "debian") # Debian 10, 11, 12
            if [[ "$OS_VERSION" =~ ^(10|11|12)$ ]]; then
                PKG_MANAGER="apt"
            fi
            ;;
        "kali") # Kali Linux
            PKG_MANAGER="apt"
            ;;
        "parrot"|"parrotsec") # Parrot OS / ParrotSec OS
            PKG_MANAGER="apt"
            ;;
        "arch"|"blackarch") # Arch Linux / BlackArch
            PKG_MANAGER="pacman"
            ;;
        "rocky") # Rocky Linux 9
            if [[ "$OS_VERSION" == "9" ]]; then
                PKG_MANAGER="dnf"
            fi
            ;;
        "rhel"|"centos") # RHEL 7, 8, CentOS
            if [[ "$OS_VERSION" == "7" ]]; then
                PKG_MANAGER="yum"
            elif [[ "$OS_VERSION" == "8" ]]; then
                PKG_MANAGER="dnf"
            fi
            ;;
        "pfsense") # pfSense (FreeBSD-based)
            PKG_MANAGER="pkg"
            ;;
        "openbsd") # OpenBSD 6.2 or higher
            if (( $(echo "$OS_VERSION >= 6.2" | bc -l) )); then
                PKG_MANAGER="pkg_add"
            fi
            ;;
        "raspbian"|"raspberrypi") # Raspberry Pi OS
            PKG_MANAGER="apt"
            ;;
        *)
            echo "Unsupported OS: $OS_NAME $OS_VERSION"
            return 1
            ;;
    esac
    echo -e "## Hostname:\t$HOSTNAME"
    echo -e "## OS Name:\t$OS_NAME"
    echo -e "## OS Vers:\t$OS_VERSION"
    echo -e "## Package Mgr:\t$PKG_MANAGER"
    while read -r i; do echo -e "## IP Address:\t$i\r\n"; done < <(ip a |grep "inet\ " |grep -v "127.0.0.1" | awk '{print $2,$9}')
}

f_make_setup() {
    # Check if make utility is installed. Required for AutoSSH.
    case "$PKG_MANAGER" in
        "apt") sudo apt install -y make gcc ;;
        "yum") sudo yum install -y make gcc ;;
        "dnf") sudo dnf install -y make gcc ;;
        "pacman") sudo pacman -Sy --noconfirm make gcc ;;
        "pkg") sudo pkg install -y make gcc ;;
        "pkg_add") sudo pkg_add make gcc ;;
        *) echo "Package manager not recognized. Cannot install the make utility."; return 1 ;;
    esac
}

f_sshd_setup() {
    # Check if SSH client is installed
    case "$PKG_MANAGER" in
        "apt") sudo apt update && sudo apt install -y openssh-client openssh-server ssh ;;
        "yum") sudo yum install -y openssh-clients openssh-server ssh ;;
        "dnf") sudo dnf install -y openssh-clients openssh-server ssh;;
        "pacman") sudo pacman -Sy --noconfirm openssh ;;
        "pkg") sudo pkg install -y openssh ;;
        "pkg_add") sudo pkg_add openssh ;;
        *) echo "Package manager not recognized. Cannot install SSH client."; return 1 ;;
    esac

    # Enable and start SSHD at boot
    echo "Enabling and starting SSHD..."
    case "$PKG_MANAGER" in
        "apt"|"dnf"|"yum"|"pacman")
            sudo systemctl enable ssh 2>/dev/null || sudo systemctl enable sshd
            sudo systemctl restart ssh 2>/dev/null || sudo systemctl restart sshd
            ;;
        "pkg") sudo service sshd enable && sudo service sshd start ;;
        "pkg_add") sudo rcctl enable sshd && sudo rcctl start sshd ;;
        *) echo "Service management not recognized."; return 1 ;;
    esac

    echo "SSH setup complete!"
}

f_cron_setup() {
    # Check if cron is installed
    if ! command -v crond &> /dev/null && ! command -v cron &> /dev/null; then
        echo "Cron is not installed. Installing..."
        case "$PKG_MANAGER" in
            "apt") sudo apt update && sudo apt install -y cron ;;
            "yum") sudo yum install -y cronie ;;
            "dnf") sudo dnf install -y cronie ;;
            "pacman") sudo pacman -Sy --noconfirm cronie ;;
            "pkg") sudo pkg install -y cron ;;
            "pkg_add") sudo pkg_add cron ;;
            *) echo "Package manager not recognized. Cannot install cron."; return 1 ;;
        esac
    else
        echo "Cron is already installed."
    fi

    # Enable cron at boot and start/restart the service
    echo "Enabling and starting cron..."
    case "$PKG_MANAGER" in
        "apt"|"dnf"|"yum"|"pacman")
            sudo systemctl enable crond 2>/dev/null || sudo systemctl enable cron
            sudo systemctl restart crond 2>/dev/null || sudo systemctl restart cron
            ;;
        "pkg") sudo service cron enable && sudo service cron start ;;
        "pkg_add") sudo rcctl enable cron && sudo rcctl start cron ;;
        *) echo "Service management not recognized."; return 1 ;;
    esac

    echo "Cron setup complete!"
}

f_cron_pass_rotation() {
    f_cron_setup
    cat <<EOF > /bin/ironjump-pass-rotation.sh
#!/bin/bash
# Password rotation for IronJump Downstream Bastions, Endpoints, and SSH Users
IRONJUMP_SSH_GROUP="ironjump_users"
IRONJUMP_SRV_GROUP="ironjump_servers"
IRONJUMP_END_GROUP="ironjump_endpoints"
PASSWORD_LENGTH="64"


### Password Length and Rotation
### ============================
## NOTE: IronJump Servers (Upstream or Downstream): devices [endpoints/ingots], servers, and users account passwords are not used. Admins should
#        use Password/Passphrase-protected SSH keys for authentication. This is due to the /bin/false shell. IronJump accounts are never
#        used for management of the bastion servers. Furthermore, the endpoints that connect to an IronJump bastion are treated similarly.
#        This is to prevent elevating privileges or connecting to other hosts in the IronJump ecosystem. Endpoints and Downstream IronJump
#        bastions are connected without password protected keys. Therefore, it is vital to ensure that someone cannot guess a
#        password for the account in use. By rotating the passwords every 8 hours, the use of passwords is effectively disabled.

## NOTE: It is not recommended to change these settings unless there is a good reason. There is a passcode generator function in the
#        IronJump menu under Endpoint Management to create or reset a password of a new or existing user directly on the host.

## NOTE: To change the rotation period. Directly edit the cron job from an elevated account.

### -----------------------------

ironjump_change_password() {
    account=\$1
    NEW_PASSWORD=\$(tr -dc 'A-Za-z0-9\~\!\@\#\$\%\^\&\*\(\)\_\+\-\=\[\]\{\}\;\:\<\>\,\.\?\/' < /dev/urandom |head -c \$PASSWORD_LENGTH)
    echo "\$account:\$NEW_PASSWORD" | chpasswd
    unset NEW_PASSWORD
}

for user in \$(getent group \$IRONJUMP_SSH_GROUP |awk -F: '{print \$4}' | tr ',' ' '); do ironjump_change_password \$user; done
for server in \$(getent group \$IRONJUMP_SRV_GROUP |awk -F: '{print \$4}' | tr ',' ' '); do ironjump_change_password \$server; done
for endpoint in \$(getent group \$IRONJUMP_END_GROUP |awk -F: '{print \$4}' | tr ',' ' '); do ironjump_change_password \$endpoint; done
ironjump_change_password ironsync
EOF
    sleep 2
    chown root:root /bin/ironjump-pass-rotation.sh
    chmod 0700 /bin/ironjump-pass-rotation.sh
    (crontab -l 2>/dev/null; echo "0 0,8,16 * * * /bin/ironjump-pass_rotation.sh") | crontab -
    echo -e "\r\nWARNING! Password rotation for all IronJump accounts is recommended and enabled by default. To disable this service, manually edit the entry [crontab -e].\r\n\r\n\tDO NOT - Add the 'root' account to any IronJump Group.\n\tDO NOT - Add a 'local' account to any IronJump Group.\n\tYou WILL CAUSE LOCKOUT and BREAK your system."
    echo "=========================="
    read -p "Press [ENTER] to continue." continue
}

#deployment_menu
deploy_secondary() {
    #f_ssh_hard_check
    #f_ssh_hard_os_selection
    #f_setup_ironjump
    #usr_mgmt_new
    main_menu
}

view_configuration() {
    if [[ -f ./CONFIG.FILE ]]; then
        cat ./CONFIG.FILE |grep -v "^#" |grep -v ^$
        echo -e "\r\n--------------------------------------------------------"
        read -p "Press [ENTER] to continue."
    else
        echo "Configuration file not in current working director."
        echo -e "\r\n--------------------------------------------------------"
        read -p "Press [ENTER] to continue."
    fi
    deployment_menu
}

mod_configuration() {
    if [[ -f ./CONFIG.FILE ]]; then
        vi ./CONFIG.FILE
    else
        echo "Configuration file not in current working director."
        echo -e "\r\n--------------------------------------------------------"
        read -p "Press [ENTER] to continue."
    fi
    deployment_menu
}

harden_ssh_service() {
    f_ssh_hard_check
    f_ssh_hard_os_selection
}

usr_mgmt_list() {
    cat /etc/passwd |sort |while IFS=: read -r username password uid gid comment home shell; do if [[ $(echo $home |grep "/home/ironjump/users" |wc -l) -eq 1 ]]; then u_stat=$(passwd -S $username |awk '{print $2}'); if [[ $(echo $u_stat) == "P" ]]; then echo -e "$username :: Public Key - $(cat $home/.ssh/authorized_keys) :: (Enabled)"; else echo "$username :: Public Key - $(cat $home/.ssh/authorized_keys) :: (Disabled)"; fi; fi; done |more
    read -p "Press [ENTER] to return to the menu." continue
    root_server_user_acct_mgmt_menu
}

usr_mgmt_new() {
    clear
    echo "IronJump SSH Management - Create/Add SSH User"
    nav_top_bar
    echo -e "\nNew User Details\n----------------\n"
    read -p "   --> Username:   " usr_new_set_name
    if [[ ! -z $(cat /etc/passwd |grep $usr_new_set_name) ]]; then echo -e "\nUsername already exists. Please try again."; sleep 2; usr_mgmt_new; fi
    read -p "   --> Real Name or Nickname:  " usr_new_set_comment
    read -p "   --> SSH Pubkey {key_type key}: " usr_new_set_pubkey
    if [[ ! "$usr_new_set_pubkey" =~ ^ssh-ed25519 ]] &&	[[ ! "$usr_new_set_pubkey" =~ ^ssh-rsa ]]; then
        echo "SSH Pubkey must be ed25519 (recommended) or RSA. Aborting user creation."
        echo -e "\r\n--------------------------------------------------------"
        read -p "Press [ENTER] to continue. Returning to User Account Menu" continue
        root_server_user_acct_mgmt_menu
    else
        key_type=$(echo $usr_new_set_pubkey | awk '{print $1}')
        key=$(echo $usr_new_set_pubkey | awk '{print $2}')
        ssh_key=$(echo $key_type $key $usr_new_set_name)
    fi
    echo -e "\r\nA new $usr_type user account will be created using the following: \r\n\tUsername: $usr_new_set_name \r\n\tIdentity: $usr_new_set_comment \r\n\tPublic SSH Key: $ssh_key \r\n\tExpiration: None"
    echo -e "\r\n--------------------------------------------------------"
    read -p "Press [C] to confirm or [A] to abort: " choice
    case "$choice" in
        A|a) root_server_user_acct_mgmt_menu ;;
        C|c)
            usr_new_set_homedir="$IRONJUMP_CHROOT_ENV/users/chroot/$usr_new_set_name"
            usr_new_set_sshdir="$usr_new_set_homedir/.ssh"
            usr_new_set_authorized_keys="$usr_new_set_sshdir/authorized_keys"
            useradd -U -m -s $(which nologin) -d $usr_new_set_homedir -c "$usr_new_set_comment" -G $IRONJUMP_SSH_GROUP $usr_new_set_name
            mkdir -p $usr_new_set_sshdir
            echo $ssh_key > $usr_new_set_authorized_keys
            chown -R $usr_new_set_name:$usr_new_set_name $usr_new_set_sshdir
            chmod 700 "$usr_new_set_sshdir"
            chmod 600 "$usr_new_set_authorized_keys"
            ;;
        *) invalid_choice; usr_mgmt_new ;;
    esac
    NEW_PASSWORD=$(tr -dc 'A-Za-z0-9\~\!\@\#\$\%\^\&\*\(\)\_\+\-\=\[\]\{\}\;\:\<\>\,\.\?\/' < /dev/urandom |head -c 64)
    echo $usr_new_set_name:$NEW_PASSWORD | chpasswd
    unset NEW_PASSWORD
    echo "New user account for $usr_new_set_name created."
    echo -e "\r\n--------------------------------------------------------"
    read -p "Press [ENTER] to continue."
    root_server_user_acct_mgmt_menu
}

usr_mgmt_enable() {
    clear
    echo "IronJump SSH Management - Enable User Account Wizard"
    nav_top_bar
    echo -e "\n"
    read -p "Enter a username to enable: " usr_set_enable_name
    if [[ $(cat /etc/passwd |grep $usr_set_enable_name |wc -l) -eq 0 ]]; then
        read -p "Username not found. Press [Enter] to return to the Account Management Menu." continue
        root_server_user_acct_mgmt_menu
    elif [[ ! -d /home/ironjump/users/chroot/$usr_set_enable_name ]]; then
        read -p "Local accounts cannot be managed in IronJump. Press [ENTER] to return to Account Management Menu." continue
        root_server_user_acct_mgmt_menu
    fi
    read -p "Are you sure you want to enable $usr_set_enable_name? Type [CONFIRM]: " choice
    if [[ $(echo $choice | tr [[:upper:]] [[:lower:]]) == "confirm" ]]; then
        usermod -U $usr_set_enable_name &>/dev/null
        echo "User $usr_set_enable_name is now enabled!"
        echo -e "\r\n--------------------------------------------------------"
        read -p "Press [ENTER] to continue." continue
        root_server_user_acct_mgmt_menu
    else
        read -p "Confirmation not given. Press [ENTER] to return to the User Account Menu." continue
        root_server_user_acct_mgmt_menu
    fi
}

usr_mgmt_disable() {
    clear
    echo "IronJump SSH Management - Disable User Account Wizard"
    nav_top_bar
    echo -e "\n"
    read -p "Enter a username to disable: " usr_set_disable_name
    if [[ $(cat /etc/passwd |grep $usr_set_disable_name |wc -l) -eq 0 ]]; then
        read -p "Username not found. Press [Enter] to return to the Account Management Menu." continue
        root_server_user_acct_mgmt_menu
    elif [[ ! -d /home/ironjump/users/chroot/$usr_set_disable_name ]]; then
        read -p "Local accounts cannot be managed in IronJump. Press [ENTER] to return to Account Management Menu." continue
        root_server_user_acct_mgmt_menu
    fi
    read -p "Are you sure you want to disable $usr_set_disable_name? Type [CONFIRM]: " choice
    if [[ $(echo $choice | tr [[:upper:]] [[:lower:]]) == "confirm" ]]; then
        usermod -L $usr_set_disable_name &>/dev/null
        pkill -u $usr_set_disable_name
        echo "User $usr_set_disable_name is now disabled!"
        echo -e "\r\n--------------------------------------------------------"
        read -p "Press [ENTER] to continue." continue
        root_server_user_acct_mgmt_menu
    else
        read -p "Confirmation not given. Press [ENTER] to return to the User Account Menu." continue
        root_server_user_acct_mgmt_menu
    fi
}

usr_mgmt_delete() {
    clear
    echo "IronJump SSH Management - Delete User Account Wizard"
    nav_top_bar
    echo -e "\n"
    read -p "Enter a username to delete: " usr_set_delete_name
    if [[ $(cat /etc/passwd |grep $usr_set_delete_name |wc -l) -eq 0 ]]; then
        read -p "Username not found. Press [Enter] to return to the Account Management Menu." continue
        root_server_user_acct_mgmt_menu
    elif [[ ! -d /home/ironjump/users/chroot/$usr_set_delete_name ]]; then
        read -p "Local accounts cannot be managed in IronJump. Press [ENTER] to return to Account Management Menu." continue
        root_server_user_acct_mgmt_menu
    fi
    read -p "Are you sure you want to delete $usr_set_delete_name? Type [CONFIRM]: " choice
    if [[ $(echo $choice | tr [[:upper:]] [[:lower:]]) == "confirm" ]]; then
        userdel -r $usr_set_delete_name &>/dev/null
        pkill -u $usr_set_delete_name
        echo "User $usr_set_delete_name has been deleted!"
        echo -e "\r\n--------------------------------------------------------"
        read -p "Press [ENTER] to continue." continue
        root_server_user_acct_mgmt_menu
    else
        read -p "Confirmation not given. Press [ENTER] to return to the User Account Menu." continue
        root_server_user_acct_mgmt_menu
    fi
}

usr_mgmt_mod_pubkey() {
    clear
    echo "IronJump SSH Management - User Account Public Key Update Wizard"
    nav_top_bar
    echo -e "\n"
    read -p "Enter a username to modify their SSH Public Key: " usr_set_update_pubkey_name
    if [[ $(cat /etc/passwd |grep $usr_set_update_pubkey_name |wc -l) -eq 0 ]]; then
        read -p "Username not found. Press [Enter] to return to the Account Management Menu." continue
        root_server_user_acct_mgmt_menu
    elif [[ ! -d /home/ironjump/users/chroot/$usr_set_update_pubkey_name ]]; then
        read -p "Local accounts cannot be managed in IronJump. Press [ENTER] to return to Account Management Menu." continue
        root_server_user_acct_mgmt_menu
    else
        read -p "   --> New SSH Pubkey {key_type key}: " usr_set_update_pubkey_key
        if [[ ! "$usr_set_update_pubkey_key" =~ ^ssh-ed25519 ]] && [[ ! "$usr_set_update_pubkey_key" =~ ^ssh-rsa ]]; then
            echo "SSH Pubkey must be ed25519 (recommended) or RSA. Aborting user creation."
            echo -e "\r\n--------------------------------------------------------"
            read -p "Press [ENTER] to continue. Returning to User Account Menu" continue
            root_server_user_acct_mgmt_menu
        else
            key_type=$(echo $usr_set_update_pubkey_key | awk '{print $1}')
            key=$(echo $usr_set_update_pubkey_key | awk '{print $2}')
            ssh_key=$(echo $key_type $key $usr_set_update_pubkey_name)
        fi
    echo -e "\r\nUpdating SSH Public Key for: \r\n\tUsername: $usr_new_set_name \r\n\tPublic SSH Key: $ssh_key"
    echo -e "\r\n--------------------------------------------------------"
    read -p "Press [C] to confirm or [A] to abort: " choice
    case "$choice" in
        A|a) root_server_user_acct_mgmt_menu ;;
        C|c)
            echo $ssh_key > /home/ironjump/users/chroot/$usr_set_update_pubkey_name/.ssh/authorized_keys
            chown $usr_set_update_pubkey_name:$usr_set_update_pubkey_name /home/ironjump/users/chroot/$usr_set_update_pubkey_name/.ssh/authorized_keys
            chmod 0600 /home/ironjump/users/chroot/$usr_set_update_pubkey_name/.ssh/authorized_keys
            access_control_path="/home/ironjump/endpoints/chroot/*/access_control"
            sed -i -E "s|^($usr_set_update_pubkey_name):[^:]+ ([^:]+):|\1:$ssh_key:|" $access_control_path
            ;;
        *) invalid_choice; root_server_acct_mgmt_menu ;;
    esac
    fi
    root_server_user_acct_mgmt_menu
}

usr_mgmt_set_expire() {
    if [[ $(cat /etc/passwd |grep $usr_set_expire_name |wc -l) -eq 0 ]]; then
        read -p "Username not found. Press [Enter] to return to the Account Management Menu." continue
        root_server_user_acct_mgmt_menu
    fi
    if [[ ! -d /home/ironjump/users/chroot/$usr_set_expire_name ]]; then
        read -p "Local accounts cannot be managed in IronJump. Press [ENTER] to return to Account Management Menu." continue
        root_server_user_acct_mgmt_menu
    else
        echo -e "To set an expiration, specify the number of days as:\r\n\t   -1: Never Expire, or\r\n\t1-999: Number of days from now\r\n"
        read -p "In how many days from today would you like the account to expire? " usr_set_expire_days
        usr_set_expire=$(echo $usr_set_expire_days |tr -d "+")
        if [[ "$usr_set_expire_days" == "-1" ]]; then
            chage -E -1 $usr_set_expire_name
            echo "User $usr_set_expire_name is set to never expire."
            echo -e "\r\n--------------------------------------------------------"
            read -p "Press [ENTER] to continue." continue
            root_server_user_acct_mgmt_menu
        elif [[ "$usr_set_expire_days" =~ ^[0-9]+$ ]] && [[ "$usr_set_expire_days" -gt 0 ]]; then
            chage -E $(date -d "+$usr_set_expire_days days" +%Y-%m-%d) $usr_set_expire_name
            echo "User $usr_set_expire_name account will expire in $usr_set_expire_days days."
            echo -e "\r\n--------------------------------------------------------"
            read -p "Press [ENTER] to continue." continue
            root_server_user_acct_mgmt_menu
        else
            echo "Invalid number of days specified. Only the number 1-999 or -1 can be used."
            read -p "Press [ENTER] to try again." continue
            usr_mgmt_set_expire
        fi
    fi
}

#dev_acct_mgmt_menu
dev_mgmt_list() {
    echo -e "\r\nEndpoint Accounts"
    echo "================="
    local EP_ACCTS=$(ls -al /home/ironjump/endpoints/chroot |awk '{print $9}' |grep -v "^\\.\|^$")
    if [[ -z $EP_ACCTS ]]; then
        echo "No Endpoint Accounts Exist."
    else
        echo $EP_ACCTS
    fi
    echo -e "\r\n"
    read -p "Press ENTER to return." choice
}

dev_mgmt_new() {
    clear
    echo "IronJump SSH Management - New Endpoint Account Creation"
    nav_top_bar
    echo "Creating account for new Endpoint deployment..."
    read -p "Where will this endpoint be located? " ep_new_location
    local ep_base="ingot-"
    local ep_num=$(ls -al /home/ironjump/endpoints/chroot |awk '{print $9}' |grep -v "^\\.\|^$" |tail -n 1 |tr -d $ep_base)
    if [[ -z $ep_num ]]; then
        ep_num="50000"
    elif [[ $(($ep_num + 1)) -gt 59999 ]]; then
        ep_num="50000"
    else
        ep_num=$(($ep_num + 1))
    fi
    local ep_account_name=$ep_base$ep_num
    #Create Endpoint Account
    local dev_new_set_homedir="$IRONJUMP_CHROOT_ENV/endpoints/chroot/$ep_account_name"
    local dev_new_set_sshdir="$dev_new_set_homedir/.ssh"
    local dev_new_set_authorized_keys="$dev_new_set_sshdir/authorized_keys"
    useradd -U -m -s $(which bash) -d $dev_new_set_homedir -c "$ep_new_location" -G ingot_registry $ep_account_name
    mkdir -p $dev_new_set_sshdir
    echo "$dev_new_set_pubkey" > $dev_new_set_authorized_keys
    chown -R $ep_account_name:$ep_account_name $dev_new_set_sshdir
    #Create Keys
    ssh-keygen -t ed25519 -f "$dev_new_set_sshdir/ironsync_key" -N "" -C $ep_account_name
    mv $dev_new_set_sshdir/ironsync_key $dev_new_set_homedir/ironsync_key
    cat $dev_new_set_sshdir/ironsync_key.pub >> /home/ironjump/servers/chroot/ironsync/.ssh/authorized_keys
    rm -f $dev_new_set_sshdir/ironsync_key.pub
    ssh-keygen -t ed25519 -f "$dev_new_set_sshdir/ironjump_key" -N "" -C $ep_account_name
    mv $dev_new_set_sshdir/ironjump_key $dev_new_set_homedir/ironjump_key
    mv $dev_new_set_sshdir/ironjump_key.pub $dev_new_set_sshdir/authorized_keys
    #Add to Group ingot_registry
    usermod  -aG ingot_registry "$ep_account_name"
    #Generate Access Token / First Time Password XXXX-XXXX-XXXX
    local token=$(cat /dev/urandom | tr -dc 'ACH-J-NP-Z2-79' | fold -w4 | head -n3 | paste -sd'-' -)
    echo $ep_account_name:$token | chpasswd
    #Create ingot-registration.sh, access_control, and ingot-keys files
    touch $dev_new_set_homedir/access_control
    cat <<EOF > "$dev_new_set_homedir/ingot-registration.sh"
#!/bin/bash
self_destruct="\$0"
cat ~/ingot-keys
sleep 1
rm -f ~/ingot-keys
sleep 1
sudo -n chsh -s /usr/sbin/nologin \$USER
sudo -n gpasswd -a \$USER ironjump_endpoints
sudo -n gpasswd -d \$USER ingot_registry
date > ~/registration_complete
rm -- "\$self_destruct"
EOF
    chmod +x $dev_new_set_homedir/ingot-registration.sh
    echo "ironjump_key="\"$(cat $dev_new_set_homedir/ironjump_key)\" >>$dev_new_set_homedir/ingot-keys
    echo "ironsync_key="\"$(cat $dev_new_set_homedir/ironsync_key)\" >>$dev_new_set_homedir/ingot-keys
    sleep 1
    rm -f $dev_new_set_homedir/ironjump_key
    rm -f $dev_new_set_homedir/ironsync_key
    #Set Permissions
    chown -R $ep_account_name:$ep_account_name $dev_new_set_homedir
    chmod 700 "$dev_new_set_sshdir"
    chmod 600 "$dev_new_set_authorized_keys"
    chown -R :ironsync $dev_new_set_homedir
    chown root:ironsync $dev_new_set_homedir/access_contorl
    chmod 0740 $dev_new_set_homedir/access_control
    #Display Username and Password Instructions
    clear
    echo "IronJump - New Endpoint Account (Credentials)"
    nav_top_bar
    echo "Username: "$ep_account_name
    echo "Password: "$token
    echo -e "\r\n!!!Write this down!!!\nThese are single use credentials for endpoint registration.\n\nAdvancing to the next screen will remove the credentials \nfrom view and they will not be shown again."
    nav_breaker_bar
    unset token
    read -p "Press ENTER to return." choice
}

dev_mgmt_enable() {
    read -p "Function Good" ; dev_acct_mgmt_menu
}

dev_mgmt_disable() {
    read -p "Function Good" ; dev_acct_mgmt_menu
}

dev_mgmt_delete() {
    read -p "Function Good" ; dev_acct_mgmt_menu
}

dev_mgmt_mod_pubkey() {
    read -p "Function Good" ; dev_acct_mgmt_menu
}

dev_mgmt_set_expire() {
    read -p "Function Good" ; dev_acct_mgmt_menu
}

#ep_mgmt_menu
ep_connect() {
    clear
    echo "IronJump SSH Management : Endpoint Registration Wizard"
    nav_top_bar
    echo -e "INFO: This wizard will connect this endpoint to an\nIronJump Server. You will need the following to continue:\n    * The IronJump Server IP Address\n    * The endpoint account name\n    * The one-time access token\r\n"
    nav_breaker_bar
    read -p "Press [ENTER] to continue" continue
    echo  -e "\r\n Collect Information for Registration\n"
    read -p "    What is the IronJump Server IP: " ironjump_srv_ip
    read -p "    What is this endpoint's name: " ironjump_ep_name
    read -p "    Where you provided an SSH access token? (yes/no): " has_token
    case $has_token in
        No|no|N|n) read -p "You cannot proceed without a token." ; ep_mgmt_menu ;;
        Yes|yes|Y|y) sleep 1 ;;
        *) invalid_choice ; ep_mgmt_menu ;;
    esac
    f_sshd_setup
    f_make_setup
    f_cron_setup
    clear
    echo "IronJump SSH Management : Endpoint Registration Wizard"
    nav_top_bar
    echo -e "INFO: This endpoint will attempt registration using\nthe following information:\n    IronJump Server:\t$ironjump_srv_ip\n    Username:\t\t$ironjump_ep_name\r\n"
    nav_breaker_bar
    echo -e "When prompted, please use the access token for SSH.\n"
    read -p "Press [ENTER] to continue." continue
    if grep -q "^ironjump_srv_ip=" ./CONFIG.FILE; then
        sed -i "s|^ironjump_srv_ip=.*|ironjump_srv_ip=$ironjump_srv_ip|" ./CONFIG.FILE
    else
        sed -i "4i ironjump_srv_ip=$ironjump_srv_ip" ./CONFIG.FILE
    fi
    clear
    if [[ ! -d /root/.ssh ]]; then mkdir /root/.ssh; chmod 0700 /root/.ssh; fi
    ssh $ironjump_ep_name@$ironjump_srv_ip |tee /root/ingot-keys
    echo "Migrating Keys"; sleep 5
    echo $ironjump_ep_name > /etc/hostname
    if [[ ! -z $HOST ]]; then sed -i "s/$HOST/$ironjump_ep_name/g" /etc/hosts; fi
    if [[ ! -z $HOSTNAME ]]; then sed -i "s/$HOSTNAME/$ironjump_ep_name/g" /etc/hosts; fi
    HOST=$ironjump_ep_name
    HOSTNAME=$ironjump_ep_name
    cat /root/ingot-keys |grep ironjump_key |cut -d '"' -f2 |sed -e 's/-\ /-\n/g' -e 's/\ -/\n-/g' >/root/.ssh/ironjump_key
    cat /root/ingot-keys |grep ironsync_key |cut -d '"' -f2 |sed -e 's/-\ /-\n/g' -e 's/\ -/\n-/g' >/root/.ssh/ironsync_key
    rm -f /root/ingot-keys
    chmod 0600 /root/.ssh/iron*_key
    cd autossh
    ./configure
    make
    make install
    cd ../
    if [[ -f /bin/ironjump-connect.sh ]]; then rm -f /bin/ironjump-connect.sh; fi
    cat <<EOF > /bin/ironjump-connect.sh
#!/bin/bash
autossh -M 0 -f -o "StrictHostKeyChecking no" -N -i /root/.ssh/ironjump_key -R $(cat /etc/hostname |cut -d '-' -f 2):localhost:22 $(cat /etc/hostname)@$ironjump_srv_ip
EOF
    if [[ -f /bin/ironjump-sync-.sh ]]; then rm -f /bin/ironjump-sync.sh; fi
    cat <<EOF > /bin/ironjump-sync.sh
#!/bin/bash
ac_host=\$(cat /etc/hostname) ssh -i /root/.ssh/ironsync_key -o "StrictHostKeyChecking no" -o "SendEnv ac_host" ironsync@$ironjump_srv_ip > /root/.ssh/access_control
sleep 5
echo -e "\r\nLast Update: \$(date)" >> /root/.ssh/access_control

#Process access control file after synchronization
ACCESS_FILE="/root/.ssh/access_control"
SUDOERS_FILE="/etc/sudoers.d/ironjump_users"
touch "\$SUDOERS_FILE"
chmod 440 "\$SUDOERS_FILE"

while IFS=":" read -r username ssh_key status; do
    [[ -z "\$username" || "\$username" == "Last Update"* || "\$username" == "root" ]] && continue
    user_exists=\$(id "\$username" &>/dev/null && echo "yes" || echo "no")
    case "\$status" in
        "Allowed")
            if [[ "\$user_exists" == "yes" ]]; then
                usermod -U "\$username"
                grep -q "^\$username " "\$SUDOERS_FILE" || echo "\$username ALL=(ALL) NOPASSWD:ALL" >> "\$SUDOERS_FILE"
                echo "\$ssh_key" >> "/home/\$username/.ssh/authorized_keys"
                chmod 600 "/home/\$username/.ssh/authorized_keys"
                chown -R "\$username:\$username" "/home/\$username/.ssh"
            elif [[ "\$user_exists" == "no" ]]; then
                useradd -m -s /bin/bash "\$username"
                mkdir -p "/home/\$username/.ssh"
                chmod 700 "/home/\$username/.ssh"
                touch "/home/\$username/.ssh/authorized_keys"
                chmod 600 "/home/\$username/.ssh/authorized_keys"
                echo "\$ssh_key" > "/home/\$username/.ssh/authorized_keys"
                chown -R "\$username:\$username" "/home/\$username/.ssh"
                echo "\$username ALL=(ALL) NOPASSWD:ALL" >> "\$SUDOERS_FILE"
                NEW_PASSWORD=\$(tr -dc 'A-Za-z0-9\~\!\@\#\$\%\^\&\*\(\)\_\+\-\=\[\]\{\}\;\:\<\>\,\.\?\/' < /dev/urandom |head -c 64)
                echo "\$username:\$NEW_PASSWORD" | chpasswd
                unset NEW_PASSWORD
            fi
            ;;
        "Revoked"|"Deleted")
            if [[ "\$user_exists" == "yes" ]]; then
                user_locked=\$(passwd -S "\$username" | grep -q " L " && echo "yes" || echo "no")
                if [[ "\$user_locked" == "no" ]]; then
                    usermod -L "\$username"
                    pkill -u "\$username"
                    echo "" > "/home/\$username/.ssh/authorized_keys"
                    chmod 600 "/home/\$username/.ssh/authorized_keys"
                    sed -i "/^\$username /d" "\$SUDOERS_FILE"
                fi
            fi
            ;;
    esac
done < "\$ACCESS_FILE"
EOF
    chmod 0700 /bin/ironjump-*.sh
    chown root:root /bin/ironjump-*.sh
    sleep 3; echo "Requesting Access Control List" ; /bin/ironjump-sync.sh
    (crontab -l 2>/dev/null; echo "@reboot sleep 120 && pgrep autossh > /dev/null || /bin/ironjump-connect.sh") | crontab -
    (crontab -l 2>/dev/null; echo "*/10 * * * * pgrep autossh > /dev/null || /bin/ironjump-connect.sh") | crontab -
    (crontab -l 2>/dev/null; echo "@reboot /bin/ironjump-sync.sh") | crontab -
    (crontab -l 2>/dev/null; echo "*/5 * * * * /bin/ironjump-sync.sh") | crontab -

    read -p "The endpoint will reboot in 15 seconds. Press [ENTER] to continue." continue
    sleep 15; shutdown -r now
    ep_mgmt_menu
}

ep_force_sync(){
    if [[ ! -f /bin/ironjump-sync.sh ]]; then
        echo "This endpoint has has not been previously connected to an IronJump server."
    else
        echo -e "\nSyncing permissions with IronJump server at $ironjump_srv_ip."
        /bin/ironjump-sync.sh
    fi
    nav_breaker_bar
    read -p "Press [ENTER] to return to Endpoint Management Menu." continue
    endpoint_dev_mgmt_menu
}

ep_add_local_usr() {
#    read -p "Function Good" ; ep_mgmt_menu
    #usr_mgmt_new
    ep_mgmt_menu
}

ep_promote_local_usr() {
    read -p "Function Good" ; ep_mgmt_menu
}

ep_enable_local_usr() {
    read -p "Function Good" ; ep_mgmt_menu
}

ep_disable_local_usr() {
    read -p "Function Good" ; ep_mgmt_menu
}

ep_expire_local_usr() {
    read -p "Function Good" ; ep_mgmt_menu
}

ep_chpass_local_usr() {
    read -p "Function Good" ; ep_mgmt_menu
}

ep_mod_local_usr_pubkey() {
    read -p "Function Good" ; ep_mgmt_menu
}

ep_delete_local_usr() {
    read -p "Function Good" ; ep_mgmt_menu
}

ep_smelt_device() {
    read -p "Function Good" ; ep_mgmt_menu
    #THIS IS COMPLETE, BUT FOR DEVELOPMENT IS NOT INCLUDED ON THIS SYSTEM'S CODE.
}

#Access Control Management
assignments_add_by_user() {
    clear
    echo -e "Access Control Management - Assign a User - Wizard"
    nav_top_bar
    read -p "Please specify a user account: " assign_user
    if ! $(id $assign_user &>/dev/null); then echo "User not found. Returning to Access Control Menu."; sleep 1; access_control_assign_user; fi
    if [[ ! -d /home/ironjump/users/chroot/$assign_user ]]; then echo -e "\nLocal Account Detected!\nUser account is eligible for Assignment.\n\nReturning to Access Control Menu."; sleep 2; access_control_assign_user; fi
    echo -e "\nCurrent User Assignments: $assign_user\n------------------------\n"
    grep -H $assign_user /home/ironjump/endpoints/chroot/*/access_control |awk -F'[:,/]' '{print "   --> " $(NF-4) ": " $NF}'
    read -p "What endpoint should $assign_user be allowed access: " assign_endpoint
    if ! $(id $assign_endpoint &>/dev/null); then echo "Endpoint Account not found. Returning to Access Control Menu."; sleep 1; access_control_assign_user; fi
    if [[ ! -d /home/ironjump/endpoints/chroot/$assign_endpoint ]]; then echo -e "\nEndpoint exists, but no home directory found.\n\nReturning to Access Control Menu."; sleep 1; access_control_assign_user; fi
    sed -i "/$assign_user/d" /home/ironjump/endpoints/chroot/$assign_endpoint/access_control
    echo -e "$assign_user:$(cat /home/ironjump/users/chroot/$assign_user/.ssh/authorized_keys):Allowed" >>/home/ironjump/endpoints/chroot/$assign_endpoint/access_control
    echo -e "\nUser $assign_user Allowed Access to $assign_endpoint.\nChanges may take up to 5 minutes."
    read -p "Press [ENTER] to return to Access Control Menu" continue
    access_control_mgmt_menu
}

assignments_add_by_endpoint() {
    clear
    echo -e "Access Control Management - Assign a User - Wizard"
    nav_top_bar
    read -p "Please specify an endpoint: " assign_endpoint
    if ! $(id $assign_endpoint &>/dev/null); then echo "Endpoint account not found. Returning to Access Control Menu."; sleep 1; access_control_assign_user; fi
    if [[ ! -d /home/ironjump/endpoints/chroot/$assign_endpoint ]]; then echo -e "\nEndpoint exists, but no home director found.\n\nReturning to Access Control Menu."; sleep 2; access_control_assign_user; fi
    echo -e "\nCurrent User Assignments: $assign_endpoint\n------------------------\n"
    cat /home/ironjump/endpoints/chroot/$assign_endpoint/access_control |awk -F'[:,/]' '{print "    --> " $1 ": " $NF}'
    read -p "What what user should be allowed access to $assign_endpoint: " assign_user
    if ! $(id $assign_user &>/dev/null); then echo "User Account not found. Returning to Access Control Menu."; sleep 1; access_control_assign_user; fi
    if [[ ! -d /home/ironjump/users/chroot/$assign_user ]]; then echo -e "\nLocal Account Detected!\nUser account is eligible for Assignment.\n\nReturning to Access Control Menu."; sleep 2; access_control_assign_user; fi
    sed -i "/$assign_user/d" /home/ironjump/endpoints/chroot/$assign_endpoint/access_control
    echo -e "$assign_user:$(cat /home/ironjump/users/chroot/$assign_user/.ssh/authorized_keys):Allowed" >>/home/ironjump/endpoints/chroot/$assign_endpoint/access_control
    echo -e "\nUser $assign_user Allowed Access to $assign_endpoint.\nChanges may take up to 5 minutes."
    read -p "Press [ENTER] to return to Access Control Menu" continue
    access_control_mgmt_menu
}

assignments_revoke_by_user() {
    clear
    echo -e "Access Control Management - Revoke a User - Wizard"
    nav_top_bar
    read -p "Please specify a user account: " assign_user
    if ! $(id $assign_user &>/dev/null); then echo "User not found. Returning to Access Control Menu."; sleep 1; access_control_revoke_user; fi
    if [[ ! -d /home/ironjump/users/chroot/$assign_user ]]; then echo -e "\nLocal Account Detected!\nUser account is eligible for Assignment.\n\nReturning to Access Control Menu."; sleep 2; access_control_revoke_user; fi
    echo -e "\nCurrent User Assignments: $assign_user\n------------------------\n"
    grep -H $assign_user /home/ironjump/endpoints/chroot/*/access_control |awk -F'[:,/]' '{print "   --> " $(NF-4) ": " $NF}'
    read -p "On what endpoint should $assign_user be revoked: " assign_endpoint
    if ! $(id $assign_endpoint &>/dev/null); then echo "Endpoint Account not found. Returning to Access Control Menu."; sleep 1; access_control_revoke_user; fi
    if [[ ! -d /home/ironjump/endpoints/chroot/$assign_endpoint ]]; then echo -e "\nEndpoint exists, but no home directory found.\n\nReturning to Access Control Menu."; sleep 1; access_control_revoke_user; fi
    sed -i "/$assign_user/d" /home/ironjump/endpoints/chroot/$assign_endpoint/access_control
    echo -e "$assign_user:$(cat /home/ironjump/users/chroot/$assign_user/.ssh/authorized_keys):Revoked" >>/home/ironjump/endpoints/chroot/$assign_endpoint/access_control
    echo -e "\nRevoked User: $assign_user on $assign_endpoint.\nChanges may take up to 5 minutes."
    read -p "Press [ENTER] to return to Access Control Menu" continue
    access_control_mgmt_menu
}

assignments_revoke_by_endpoint() {
    clear
    echo -e "Access Control Management - Revoke a User - Wizard"
    nav_top_bar
    read -p "Please specify an endpoint: " assign_endpoint
    if ! $(id $assign_endpoint &>/dev/null); then echo "Endpoint account not found. Returning to Access Control Menu."; sleep 1; access_control_revoke_user; fi
    if [[ ! -d /home/ironjump/endpoints/chroot/$assign_endpoint ]]; then echo -e "\nEndpoint exists, but no home director found.\n\nReturning to Access Control Menu."; sleep 2; access_control_revoke_user; fi
    echo -e "\nCurrent User Assignments: $assign_endpoint\n------------------------\n"
    cat /home/ironjump/endpoints/chroot/$assign_endpoint/access_control |awk -F'[:,/]' '{print "    --> " $1 ": " $NF}'
    read -p "What what user should have access revoked from $assign_endpoint: " assign_user
    if ! $(id $assign_user &>/dev/null); then echo "User Account not found. Returning to Access Control Menu."; sleep 1; access_control_revoke_user; fi
    if [[ ! -d /home/ironjump/users/chroot/$assign_user ]]; then echo -e "\nLocal Account Detected!\nUser account is eligible for Assignment.\n\nReturning to Access Control Menu."; sleep 2; access_control_revoke_user; fi
    sed -i "/$assign_user/d" /home/ironjump/endpoints/chroot/$assign_endpoint/access_control
    echo -e "$assign_user:$(cat /home/ironjump/users/chroot/$assign_user/.ssh/authorized_keys):Revoked" >>/home/ironjump/endpoints/chroot/$assign_endpoint/access_control
    echo -e "\nUser $assign_user Denied Access to $assign_endpoint.\nChanges may take up to 5 minutes."
    read -p "Press [ENTER] to return to Access Control Menu" continue
    access_control_mgmt_menu
}

access_control_list_assignments() {
    clear
    echo -e "Access Control Management - View Assignments"
    nav_top_bar
    cat /etc/passwd |sort |while IFS=: read -r username password uid gid comment home shell; do if [[ $(echo $home |grep "/home/ironjump/endpoints" |wc -l) -eq 1 ]]; then u_stat=$(passwd -S $username |awk '{print $2}'); if [[ $(echo $u_stat) == "P" ]]; then echo -e "$username (Enabled)"; while IFS=: read -r usr pubkey i_stat; do echo "    --> $usr ($i_stat)"; done <$home/access_control; else echo "$username (Disabled)"; fi; fi; done |more
    nav_breaker_bar
    read -p "Press [ENTER] to return to Menu." continue
    access_control_mgmt_menu
}


ssh_monitor() {
    trap main_menu INT
    while true; do
        clear
        echo "SSH Connection Monitor - $(date)"
        echo "--------------------------------------------"

        # Display current SSH connections with details (IPs, users, and ports)
        printf "%-15s %-20s %-10s %-10s\n" "USER" "REMOTE_IP" "PORT" "PID"
        lsof -iTCP -sTCP:ESTABLISHED -n | grep sshd | while read -r line; do
            pid=$(echo "$line" | awk '{print $2}')
            user=$(ps -o user= -p "$pid")
            remote_ip=$(echo "$line" | awk '{print $9}' | cut -d '>' -f 2 | cut -d ':' -f 1)
            port=$(echo "$line" | awk '{print $9}' | cut -d '>' -f 2 | cut -d ':' -f 2)
            printf "%-15s %-20s %-10s %-10s\n" "$user" "$remote_ip" "$port" "$pid" |grep -v root
        done

        # Add a separator for readability
        echo "--------------------------------------------"
        echo "RAW VIEW"
        echo "--------------------------------------------"
        lsof -i -n -P |grep ssh |grep -v "root\|7u \|8u "
        echo "--------------------------------------------"
        echo "[Press Ctrl+C to Return to Main Menu]"
        # Sleep for 3 seconds before refreshing
        sleep 3
    done
}

